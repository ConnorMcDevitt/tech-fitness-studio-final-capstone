'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var sizes = {};
var viewport = {
  // Add callback to a size change
  on: function on(size, callback) {
    sizes[size].addListener(callback);
  },


  // Remove callback from a size change
  off: function off(size, callback) {
    sizes[size].removeListener(callback);
  },


  // Find if current viewport matches a size
  is: function is(size) {
    return sizes[size].matches;
  },


  // Find if current viewport does not match a size
  isNot: function isNot(size) {
    return !sizes[size].matches;
  },


  // Return the current viewport size
  current: function current() {
    var _this = this;

    return Object.keys(sizes).find(function (size) {
      return _this.is(size);
    });
  }
};

var viewportMixin = function viewportMixin(viewportVariable) {
  if (arguments.length === 1 || typeof arguments[1] === 'function') {
    // individual tag
    return createMixin(viewportVariable, arguments[1]);
  } else {
    // shared mixin
    sizes[viewportVariable] = arguments[1];
    return createMixin(viewportVariable, null);
  }
};

function createMixin(size, callback) {
  return {
    init: function init() {
      var _this2 = this;

      this[size] = viewport.is(size);

      if (callback) {
        callback();
      }

      var sizeCallback = function sizeCallback(mql) {
        _this2[size] = mql.matches;
        callback ? callback() : _this2.update();
      };

      this.on('mount', function () {
        viewport.on(size, sizeCallback);
      });

      this.on('unmount', function () {
        viewport.off(size, sizeCallback);
      });
    }
  };
}

exports.viewport = viewport;
exports.viewportMixin = viewportMixin;
